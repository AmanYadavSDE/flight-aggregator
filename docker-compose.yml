version: '3.8'

services:
  app:
    build: .
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DB_HOST=postgres
      - DB_USERNAME=flightuser
      - DB_PASSWORD=flightpass
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - SPRING_REDIS_HOST=redis
      - SPRING_REDIS_PORT=6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - flight-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: flightbooking
      POSTGRES_USER: flightuser
      POSTGRES_PASSWORD: flightpass
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - flight-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U flightuser -d flightbooking"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - flight-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: redis-server --appendonly yes

  mock-airline-api:
    image: mockserver/mockserver:latest
    ports:
      - "8081:1080"
    environment:
      MOCKSERVER_INITIALIZATION_JSON_PATH: /config/airline-mocks.json
      MOCKSERVER_SERVER_PORT: 1080
    volumes:
      - ./mock-configs:/config
    networks:
      - flight-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:1080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  mock-payment-gateway:
    image: mockserver/mockserver:latest
    ports:
      - "8082:1080"
    environment:
      MOCKSERVER_INITIALIZATION_JSON_PATH: /config/payment-mocks.json
      MOCKSERVER_SERVER_PORT: 1080
    volumes:
      - ./mock-configs:/config
    networks:
      - flight-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:1080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  flight-network:
    driver: bridge
